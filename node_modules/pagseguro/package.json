{
  "author": {
    "name": "Alan Hoffmeister",
    "email": "contato@cranic.com.br",
    "url": "https://github.com/cranic"
  },
  "contributors": [
    {
      "name": "Alan Hoffmeister",
      "email": "contato@cranic.com.br"
    },
    {
      "name": "Vinicius Trampusch",
      "email": "vinicius.trampusch@gmail.com",
      "url": "https://github.com/ViniciusTrampusch"
    },
    {
      "name": "Bernardo F. Domingues",
      "email": "bernardofd@gmail.com",
      "url": "https://github.com/bernardofd"
    }
  ],
  "name": "pagseguro",
  "description": "Fornece integração à API de pagamentos do PagSeguro",
  "version": "0.1.0",
  "homepage": "https://github.com/cranic/node-pagseguro",
  "repository": {
    "type": "git",
    "url": "git://github.com/cranic/node-pagseguro.git"
  },
  "scripts": {
    "prepublish": "./node_modules/.bin/coffee -c ./lib/",
    "build": "npm run prepublish"
  },
  "dependencies": {
    "request": "2.9.x",
    "jstoxml": "0.1.x"
  },
  "devDependencies": {
    "coffee-script": "*"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# node-pagseguro\n\nIntegração ao Pagseguro para sistemas usando o Node.js\n\n## Instalação\n\n`npm install pagseguro`\n\n## Como usar\n\n### Para pagamentos únicos\n\n```javascript\n    //Inicializar a função com o e-mail e token\n    var pag, pagseguro;\n    pagseguro = require('pagseguro');\n    pag = new pagseguro({\n        email : 'suporte@lojamodelo.com.br',\n        token: '95112EE828D94278BD394E91C4388F20'\n    });\n\n    //Configurando a moeda e a referência do pedido\n    pag.currency('BRL');\n    pag.reference('12345');\n\n    //Adicionando itens\n    pag.addItem({\n        id: 1,\n        description: 'Descrição do primeiro produto',\n        amount: \"4230.00\",\n        quantity: 3,\n        weight: 2342\n    });\n\n    pag.addItem({\n        id: 2,\n        description: 'Esta é uma descrição',\n        amount: \"5230.00\",\n        quantity: 3,\n        weight: 2342\n    });\n\n    pag.addItem({\n        id: 3,\n        description: 'Descrição do último produto',\n        amount: \"8230.00\",\n        quantity: 3,\n        weight: 2342\n    });\n\n    //Configurando as informações do comprador\n    pag.buyer({\n        name: 'José Comprador',\n        email: 'comprador@uol.com.br',\n        phoneAreaCode: '51',\n        phoneNumber: '12345678'\n    });\n\n    //Configurando a entrega do pedido\n\n    pag.shipping({\n        type: 1,\n        street: 'Rua Alameda dos Anjos',\n        number: '367',\n        complement: 'Apto 307',\n        district: 'Parque da Lagoa',\n        postalCode: '01452002',\n        city: 'São Paulo',\n        state: 'RS',\n        country: 'BRA'\n    });\n\n    //Configuranto URLs de retorno e de notificação (Opcional)\n    //ver https://pagseguro.uol.com.br/v2/guia-de-integracao/finalizacao-do-pagamento.html#v2-item-redirecionando-o-comprador-para-uma-url-dinamica\n    pag.setRedirectURL(\"http://www.lojamodelo.com.br/retorno\");\n    pag.setNotificationURL(\"http://www.lojamodelo.com.br/notificacao\");\n\n    //Enviando o xml ao pagseguro\n    pag.send(function(err, res) {\n        if (err) {\n            console.log(err);\n        }\n        console.log(res);\n    });\n```\n\n### Assinaturas (Pagamentos Recorrentes)\n\n```javascript\n    // Inicializa o objeto PagSeguro em modo assinatura\n    var pagseguro = require('pagseguro'),\n        pag = new pagseguro({\n            email : 'suporte@lojamodelo.com.br',\n            token: '95112EE828D94278BD394E91C4388F20',\n            mode : 'subscription'\n        });\n\n    //Configurando a moeda e a referência do pedido\n    pag\n        .currency('BRL')\n        .reference('12345');\n\n    /***********************************\n    *     Configura a assinatura       *\n    ************************************/\n\n    //Configurando as informações do comprador\n    pag.buyer({\n        name: 'José Comprador',\n        email: 'comprador@uol.com.br',\n        phoneAreaCode: '51',\n        phoneNumber: '12345678',\n        street: 'Rua Alameda dos Anjos',\n        number: '367',\n        complement: 'Apto 307',\n        district: 'Parque da Lagoa',\n        postalCode: '01452002',\n        city: 'São Paulo',\n        state: 'RS',\n        country: 'BRA'\n    });\n\n    // Configurando os detalhes da assinatura (ver documentação do PagSeguro para mais parâmetros)\n    pag.preApproval({\n        // charge: 'auto' para cobranças automáticas ou 'manual' para cobranças\n        // disparadas pelo seu back-end\n        // Ver documentação do PagSeguro sobre os tipos de cobrança\n        charge: 'auto',\n        // Título da assinatura (até 100 caracteres)\n        name: 'Assinatura de serviços',\n        // Descrição da assinatura (até 255 caracteres)\n        details: 'Assinatura mensal para prestação de serviço da loja modelo',\n        // Valor de cada pagamento\n        amountPerPayment: '50.00',\n        // Peridiocidade dos pagamentos: Valores: 'weekly','monthly','bimonthly',\n        // 'trimonthly','semiannually','yearly'\n        period: 'monthly',\n        // Data de expiração da assinatura (máximo 2 anos após a data inicial)\n        finalDate: '2016-10-09T00:00:00.000-03:00'\n    });\n\n\n\n    //Configurando URLs de retorno e de notificação (Opcional)\n    //ver https://pagseguro.uol.com.br/v2/guia-de-integracao/finalizacao-do-pagamento.html#v2-item-redirecionando-o-comprador-para-uma-url-dinamica\n    pag\n        .setRedirectURL(\"http://www.lojamodelo.com.br/retorno\")\n        .setNotificationURL(\"http://www.lojamodelo.com.br/notificacao\");\n\n    // Configurando URL de revisão dos termos de assinatura (Opcional)\n    pag.setReviewURL(\"http://www.lojamodelo.com.br/revisao\");\n\n    //Enviando o xml ao pagseguro\n    pag.send(function(err, res) {\n        if (err) {\n            console.log(err);\n        }\n        console.log(res);\n    });\n```\n\n### Modo Sandbox\n\nO modo Sandbox do PagSeguro (hoje, 09/10/2014, em beta) permite o desenvolvedor a testar seu código usando o serviço do PagSeguro sem disparar transações reais mas ainda recebendo notificações. Por enquanto ele só dá suporte a pagamentos padrão, logo para testar assinaturas ainda é necessário realizar uma transação real.\n\nPara utilizar o modo Sandbox, basta inicializar a biblioteca com a opção `mode : 'sandbox'` como no exemplo abaixo e utilizá-la para gerar pagamentos avulsos.\n\n```javascript\n    // Inicializa o objeto PagSeguro em modo assinatura\n    var pagseguro = require('pagseguro'),\n        pag = new pagseguro({\n            email : 'suporte@lojamodelo.com.br',\n            token: '95112EE828D94278BD394E91C4388F20',\n            mode : 'sandbox'\n        });\n```\n\nÉ preciso gerar um token específico para o modo Sandbox na [Página do Sandbox do PagSeguro](https://sandbox.pagseguro.uol.com.br)\n\n## Changelog\n\n* **v0.1.0** - Assinaturas no PagSeguro\n    - Novo construtor aceita um objeto de configuração ao invés dos argumentos de e-mail e token. A maneira antiga ainda é válida, mas está obsoleta e gerará um aviso no console.\n    - A configuração aceita três modos de pagamento (atributo `mode`):\n        + `'payment'` : Pagamento único padrão do PagSeguro (**Padrão**)\n        + `'subscription'` : Modo de assinatura para pagamentos recorrentes\n        + `'sandbox'` : Modo de testes do PagSeguro (ver https://sandbox.pagseguro.uol.com.br/)\n    - Nova função para configurar assinaturas: `pag.preApproval(config)`\n    - Caso a função `addItem()` seja chamada em modo `subscription`, é levantada uma exceção\n    - Caso a função `preApproval()` seja chamada em modo `payment` ou `sandbox`, é levantada uma exceção\n    - Caso a função `setReviewURL()` seja chamada em modo `payment` ou `sandbox`, é levantada uma exceção\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cranic/node-pagseguro/issues"
  },
  "_id": "pagseguro@0.1.0",
  "dist": {
    "shasum": "119c1b4cf7fe8e3e3c2d10e84f3aeb712b754645"
  },
  "_from": "pagseguro@>=0.1.0",
  "_resolved": "https://registry.npmjs.org/pagseguro/-/pagseguro-0.1.0.tgz"
}
